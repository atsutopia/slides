extends /layout/_application

prepend Config
  - title = '安全なWebアプリケーションの作り方'


block content
  section.bg-red
    span.background.dark(style="background-image:url('https://source.unsplash.com/R1J6Z1cnJZc/1600x800')")
    // .wrap = container (width: 90%)
    .wrap.aligncenter
      h1
        strong 安全なWebアプリケーションの作り方
      h5.text-symbols ***
    // .end .wrap
  section
    .wrap.size-70
      h2
        strong Agenda
      hr
      ol.text-cols
        li トレーニング概要
        li 自己紹介
        li 不正利用防止対策について
        li ステップ別セキュリティ対策
  section.bg-green
    span.background.dark(style="background-image:url('https://images.unsplash.com/photo-1535219241072-7d3c28a49a5c')")
    // .wrap = container (width: 90%)
    .wrap.aligncenter.fadeInUp
      h3
        strong トレーニング概要
    // .end .wrap
  section.slide-top
    h1 セキュリティ上の注意ポイントを解説しながらステップ形式アプリケーション構築を行う
    img.vertxcenter(src="./images/web-security/structure.svg" style="width: 1200px")


  section.fullscreen
    span.background.dark(style="background-image:url('./images/cover/profile.png'); width: 60%; height: 120%; top: 50%; left: 50%; transform: translate(-50%, -50%); opacity: .4;")
    h2(style="position: relative; font-weight: bold;") WHAT I'M ABOUT
    p(style="position: relative; font-weight: bold;")
      | 株式会社TRUNK TL Kawasaki Atsushi<br>
      | 2013年じげんグループHRメディア事業のPMやバックエンドを担当。<br>
      | 新規事業立ち上げの経験を経てエンジニアリングユニットのマネージャーに従事。<br>
      |
      | 2015年に株式会社カヤックへ入社。<br>
      | クライアントワークや自社サービス(Lobi)のフロントエンド、バックエンドおよびインフラ設計、構築、運用を担当。<br>

  section.bg-green
    span.background.dark(style="background-image:url('https://images.unsplash.com/photo-1535219241072-7d3c28a49a5c')")
    // .wrap = container (width: 90%)
    .wrap.aligncenter.fadeInUp
      h1 不正利用防止対策について
    // .end .wrap

  section.slide-top
    h1 脆弱性診断
    p
      | WEBアプリケーションの脆弱性診断では大きく「プラットフォーム診断」とアプリケーション診断がある
    ol
      li プラットフォーム診断
        p
          | サーバーやネットワークに対する脆弱性診断
      li アプリケーション診断
        p
          | Webアプリケーションに対する脆弱性診断。「ブラックボックス診断」と呼ばれる診断方法では実際にWebアプリケーションを動かして診断を行う。
          | 一方、「ホワイトボックス診断」と呼ばれる診断方法ではソースコードを解析することにより、脆弱性を発見します。

    h1 脆弱性診断ツールの代表例
    h3 Nmap
    p
      | ポートスキャンという機能が有名でサーバーやネットワーク機器のオープンポートを列挙する <br>
      a(href="https://nmap.org/man/jp/") https://nmap.org/man/jp/

    h3 Nessus
    p
      | Nessusは現在まで世界中で20,000以上の顧客と10,000,000件のダウンロードが有ったネットワーク業界で最も広く知られたネットワーク機器の 脆弱性検出とシステム機器構成評価用ソフトウェア <br>
      a(href="https://jp.tenable.com/products/nessus/nessus-professional") https://jp.tenable.com/products/nessus/nessus-professional

  section.slide-top
    h1 バグバウンティ
    p
      | バグバウンティとは「脆弱性報奨金制度」や「バグ報奨金制度」とも呼ばれ、、企業が脆弱性に報奨金をかけて一般公開し、
      | 一般人が発見した脆弱性を報告して報奨金を受け取る制度

    h2 導入例
    h4 Google
    p
      | Googleでは、ChromeとAndroidを分けてバグバウンティのプログラムを用意
      | 過去には、緊急度が高い脆弱を発見した人に対し、約330万円（30,000$）の報奨金が支払われた例もある

    h4 Facebook
    p
      | Facebookとその傘下であるInstagramでバグバウンティのプログラムを用意
      | 2016年には、10歳の少年がInstagramの脆弱性を指摘し、約100万円（10,000$）の報奨金が支払われた

  section.bg-green
    span.background.dark(style="background-image:url('https://images.unsplash.com/photo-1535219241072-7d3c28a49a5c')")
    // .wrap = container (width: 90%)
    .wrap.aligncenter.fadeInUp
      h1 ステップ別セキュリティ対策
    // .end .wrap

  section.slide-top
    h1 安全なアプリケーションには適切な権限管理と脆弱性を生まないことが大切
    h2.u-verx9-t 脆弱性とは?
    p
      | 脆弱性とはセキュリティバグのことを指し、悪用できるバグとも言えます。
      | アプリケーションにバグはつきものですが、セキュリティーホールになりえるようなバグの例は以下になります。
      ol
        li 個人情報が閲覧できる
        li Webサイトの内容が書き換えられる
        li サイトを閲覧した利用者のPCを感染させる
        li コンピューター資源を勝手に使われる (暗号通貨のマイニング)

  section.slide-top
    h3 制作ステップ
    ol
      li ドメイン取得
      li サーバーの構築
      li アプリケーションの作成
      li テスト
      li リリース
    img.vertxcenter(src="./images/web-security/structure.svg" style="width: 1200px")

  section.bg-green
    span.background.dark(style="background-image:url('https://images.unsplash.com/photo-1535219241072-7d3c28a49a5c')")
    // .wrap = container (width: 90%)
    .wrap.aligncenter.fadeInUp
      h3
        strong ドメイン取得
    // .end .wrap

  section.slide-top
    h1 ドメイン取得
    p
      | Webドメインとは、WebサイトのURLの終わりにある.comや.jpなどのサイトが登録された場所を示す文字コードです。
      | ドメインの種別は大きく分けて「gTLD」と「ccTLD」に大別できます。
      | gTLDは従来、世界の誰もが登録できる「.com」「.net」「.org」と、登録にあたって一定の要件が必要とされる「.edu」「.gov」などが存在する。
      | ccTLDは、各国/地域に割り当てられたTLDであり、2文字の国コードを原則として使用している。「.jp」「.au」「.us」などが例に挙げられる
    h3 取得ドメインの注意点
    p
      | ccTLDのドメインを取得する場合はvb.lyが警告なしでリビア政府によって差し押さえらた事例もあるとおり
      | 国の情勢も考慮に入れたほうが良い。
      | また、ioドメインもccTLDのドメインの一種だが、過去にioドメインの名前解決障害が起こったこともあるように実際のプロダクションで利用する場合は慎重に
      | 導入したほうがよい

  section.slide-top
    h1 サーバーの構築
    p
      | アプリケーションを構築する上でまずはサーバーを構築することとなる。
      | Webサーバーの場合はポートを開放して外部からのアクセスを受け付ける必要があるが、開放するポートの設定は気をつける必要がある
    img.vertxcenter(src="./images/web-security/port.svg" style="width: 1000px")

  section.slide-top
    h1 ポートの種類
    h3 80/443
    p
      | http/https通信が行われているポート
      | サイト訪問者がこのポートを利用してリソースを取得するため、誰でもこのポートを利用してサーバーにアクセスすることができる
    h4 22
    p
      | SSHで利用されるポート。SSHとはサーバーに接続し遠隔操作をする仕組みで主にサイト運用者がこのポートを利用する
      | そのため、SSH接続が可能な接続元アドレスを指定することがよい。また、複数人でサーバーを運用する場合は権限管理の設定に気をつける

    h4 21
    p
      | FTPとはFile Transfer Protocolの省略でファイルの転送に使われているプロトコル
      | 昔はページの更新などでこのポートが利用されていたが、現在では <strong> セキュリティ上問題 </strong> があるため現在ではほとんど使われない
      | セキュリティ上の問題というのは通信データが「暗号化」されていないことにあります。つまり、接続情報が盗聴されるリクスがあります

  section.slide-top
    h1 ミドルウェア
    p
      | サーバーは様々なミドルウェアを組み合わせて構築されていきます。代表例としてはApacheやNginx,Mysql,PostgreSqlがそれらにあたります。
      | 便利は反面、ミドルウェアの脆弱性をついたサイバー攻撃も発生します。脆弱性が見つかった場合はインストールしているミドルウェアのバージョンを確認し、
      | 速やかにセキュリティパッチを取り込むようにしましょう。
      | セキュリティパッチ情報例
      |
      a(href="https://www.ipa.go.jp/security/announce/about.html#section2") https://www.ipa.go.jp/security/announce/about.html#section2

  section.slide-top
    h1 ログ管理
    p
      | ログは情報漏えいが発生してしまったときにその被害状況や影響調査などに使用するため、ログの取得と保管は重要になります。
      | ただし、機密情報 (パスワードなど) はログに平文では書き込まないように気をつけよう

  section.bg-green
    span.background.dark(style="background-image:url('https://images.unsplash.com/photo-1535219241072-7d3c28a49a5c')")
    // .wrap = container (width: 90%)
    .wrap.aligncenter.fadeInUp
      h3
        strong アプリケーションの作成
    // .end .wrap


  section.slide-top
    h1 ブラウザにレンダリングされるまでの流れ
    img.vertxcenter(src="./images/web-security/flow.svg" style="width: 1200px")


  section.slide-top
    h1 Request/Response
    ol
      li 暗号化通信
      li Cache
      li Cookie
      li CORS
    img.vertxcenter(src="./images/web-security/flow-request.svg" style="width: 1200px")

  section.slide-top
    h1 暗号化通信
    p
      | HTTP通信でクライアントとサーバー間の通信が暗号化されておらず、盗聴される危険があります。
      | 個人情報を扱うようなアプリケーションを作成する場合は必ずHTTPS対応を行いましょう。
      | 最近では、無料でHTTPS化をするための <a href="https://letsencrypt.jp/">https://letsencrypt.jp/</a> というサービスもあります。

    p
      img.vertxcenter(src="./images/web-security/http.svg" style="width: 800px")
    p
      img.vertxcenter(src="./images/web-security/https.svg" style="width: 800px; margin-top: 300px;")

  section.slide-top
    h1 Cashe
    p
      | キャッシュはアプリケーションのパフォーマンス向上に大きく期待でき、多くのアプリケーションで導入されています。
      | ただし、セッション情報が利用されているページや個人情報が乗っているページをキャッシュすると情報漏えいの原因となるので
      | キャッシュルールの設定には十分気をつける必要がある

  section.slide-top
    h1 Cookie
    p
      | クッキーによる自動認証は多くのアプリケーションで利用されている
    table
      thead
        tr
          th カラム名
          th 値 (例)
          th 説明
      tbody
        tr
          td Name
          td _twitter
          td クッキー名
        tr
          td Value
          td BAh7CSIKZmxhc2hJ...
          td
            | クッキー値 (暗号化したデータをセット)
            br
            | セキュリティ上、以下のようなことを気をつける必要があります
            br
            | ・暗号化したデータをセットする
            br
            | ・パスワードなどの機密情報をクッキーにセットしない
        tr
          td domain
          td .twitter.com
          td
            | クッキーが届くドメインを指定
            br
            | .twitter.comと指定することによりサブドメイン間との共有もできる
        tr
          td path
          td /
          td
            | クッキーを読み込めるパスを指定する
            br
            | 「/」 と指定することで全ページから読み込める
        tr
          td Expires / Max-Age
          td 2028-09-09T01:13:08.543Z
          td
            | クッキーの有効期限
            br
            |  省略するとブラウザを終了させるまでが有効期限となる
        tr
          td HttpOnly
          td true
          td
            | CookieをJavaScriptからアクセスできないように制限
        tr
          td Secure
          td true
          td
            | HTTPSで通信している場合にのみCookieを送信する

  section.slide-top
    h1 CORS
    p
      | CORS (Cross-Origin Resource Sharing)とは異なるオリジン間でデータをやり取りするための取り決め
      | CORSの設定はレスポンスヘッダによって行うが、同一オリジンポリシーが全く無い場合ブラウザから悪意ある攻撃者のサイトにアクセスし、
      | ページのJavaScriptが実行される危険性がある

    table
      thead
        tr
          th ヘッダ
          th 説明
      tbody
        tr
          td Access-Control-Allow-Origin
          td 許可するオリジン
      tbody
        tr
          td Access-Control-Allow-Methods
          td 許可するHTTPメソッドの種類

  section.slide-top
    h1 アプリケーション処理 (Backend)
    img.vertxcenter(src="./images/web-security/backend.svg" style="width: 1200px")

  section.slide-top
    h1 アプリケーション処理 (Backend)
    ol
      li 入力値の検証
      li CSRF
      li セッション管理
      li オープンリダイレクト
      li メールヘッダ・インジェクション
      li ディレクトリ・トラバーサル
      li OSコマンドインジェクション

  section.slide-top
    h1 入力値の検証ステップ
    ol
      li 文字エンコーディングの妥当性検証
      li 入力値の妥当性検証

    h2 文字エンコーディングの妥当性検証
    p
      | Ruby1.9では不正な文字コードを受け付けない言語仕様となっているため、アプリケーションで検証を行っていないことも
      | 少なくないかもしれませんが、もし不正な文字コードを受け付けてしまった場合はバグの温床となる恐れがある
      | 不正な文字コードを

    h2 入力値の妥当性検証
    p
      | 入力値検証 (バリデーション) の主目的はセキュリティのためではないですが、セキュリティ対策に役立つ例もあります。
      | ・SQLインジェクション対策が漏れていた場合でも入力値検証により実害に至らない
      | などもその一つです。データの不整合を起こさないためにもバリデーションチェックはしっかり行う必要がある

  section.slide-top
    h1 CSRF
    p
      | CSRF(クロスサイトリクエストフォージェリ)とはリクエスト強要とも呼ばれており、悪意のある第三者が作成したページを利用者が見た場合に
      | 意図しない形でショッピングカートに品物を入れてしまったり、SNSへ投稿してしまったりする攻撃の一種。

    pre: code
      :escape-html
        <body onload="document.csrf.submit()">
          <form name="csrf" action="http://sample.shop.com/order" method="POST">
            <input type="hidden" name="product" value="bread">
            <input type="hidden" name="amount" value="1000">
          </form>
        </body>

    h2 CSRF対策
    p
      | Webアプリケーションフレームワーク側でワンタイムトークンの発行を標準でサポートされていることが多いため、利用すると良い
      | ワンタイムトークンとはページを閲覧しているユーザーごとにランダムなトークン文字列が発行され、サーバー側でトークンの検証を行うことで
      | 第三者からのリクエストを受けつ内容にする

  section.slide-top
    h1 セッション管理
    p
      | セッションはログイン認証状態の保持する手段としてセッション管理機構が用いられています。
      | 主流のセッション管理機構は、クッキーなどにセッションIDを保存させ、セッションIDをキーにサーバー側で情報を記憶するという手法が取られている。
      | 第三者にこのセッションIDが知られると、その利用者に成りすましてアクセスされる可能性があります。第三者が悪用して成りすますことを「セッションハイジャック」
      | と呼びます。

    h1 セッションハイジャックの対策法
    p
      | 推測可能なセッションIDを使わない
      | サーバー側でセッション情報を保存する
      | セッション情報を暗号化する
      | セッション情報を露出させない (URLに埋め込まない)

  section.slide-top
    h1 その他のセキュリティ対策
    h5 オープンリダイレクト
    p
      | パラメータにより指定したURLにリダイレクトする機能をリダイレクタと呼び、任意のドメインにリダイレクトできるものをオープンリダイレクタと呼ぶ。
      | 利用者が信頼しているドメイン上にオープンリダイレクタ脆弱性があると、利用者は自分が信頼しているサイトを閲覧しているつもりでも知らない間に罠のサイトに誘導される可能性がある。
      | 対策としては「リダイレクト先のドメインをチェック」「ダイレクト先のURLを固定にする」などがある

    h5 メールヘッダ・インジェクション
    p
      | メールヘッダーインジェクションとは、メールの件名などの入力値を改ざんすることで、Bcc:などのメールヘッダーを付加する攻撃のことをいいます。
      | 問い合わせフォームのようなメール送信画面にメールヘッダーインジェクションに対する脆弱性があると、迷惑メールの送信に悪用されてしまう可能性がある
      | 対策としてはメールのヘッダに改行が含まれていないかなどの入力値のチェックや、インジェクション対策済みのライブラリを使用するなどがある

    h5 ディレクトリ・トラバーサル
    p
      | ディレクトリトラバーサル攻撃というのは、「../」等の親ディレクトリを示す表記をファイル名パラメータの中に混入し、サーバ内の任意のファイルを読み出そうとする攻撃である。
      | 外部から入力された値をもとにファイルを開こうとした場合、機密情報が流出する可能性がある。
      | 対策としては、入力値の検証を行ったり権限管理の設定行う必要がある
    code: pre
      | # input ../../etc/passwd
      | dir = "/var/data1";
      | open(HANDLE, "<$dir/$filename");

    h5 OSコマンドインジェクション
    p
      | OSコマンド・インジェクションとは、不正なOSコマンドを送信することにより、攻撃対象となったPCやサーバに不正アクセスを行う攻撃の一種
      | 対策としては可能な限りシェル（cmd.exeなど）を起動可能な言語機能の利用を避ける、外部からの命令文をそのままコマンドラインにインジェクションさせない


  section.slide-top
    h1 データベース
    img.vertxcenter(src="./images/web-security/database.svg" style="width: 1200px")

  section.slide-top
    h1 データベース
    ol
      li SQLインジェクション
      li 機密情報の暗号化

  section.slide-top
    h1 SQLインジェクション
    p
      | 多くのWebアプリケーションがデータベースを利用していて、データの問い合わせにSQLを使用しています。
      | SQLの呼び出しに不備がある場合、SQLインジェクションという脆弱性が生まれます。
      | SQLインジェクション脆弱性がある場合は以下のうようなセキュリティリスクが考えられる
      ol
        li データベースの内部情報が外部から盗まれる
        li データベースの内部が意図せず書き換えられる or 削除される
        li IDとパスワードが一致せずともログインされる

  section.slide-top
    h1 SQLインジェクションの代表例
    h3 シングルクォートを使った攻撃手法
    h5 テーブル
    table
      thead
        tr
          th id
          th password
      tbody
        tr
          td admin
          td password
        tr
          td hoge
          td fuga
    code: pre
      | SELECT * FROM users WHERE id = '{$userId}' AND password = '{$passwd}';
    img.vertxcenter(src="./images/web-security/form.svg" style="width: 600px")
    p
      | この場合ユーザーIDは「admin」でパスワードが「password」でログインできる機能があるとします。
      | 第三者はパスワードが知らずとも以下の入力値でログインが可能です
      | id: admin
      | password: ' OR 'A' = 'A
      | この場合、以下のSQLが発行されます。
      code: pre
        | SELECT * FROM users WHERE id = 'admin' AND password = '' OR 'A' = 'A';
    p
      | パラメータとして入力値「'」を含ませることで、パスワードに関するWHERE句の条件式を一旦終端させ、次にORを含ませると、「'A' = 'A'」という恒真式がORの対象になる。
      | よって、WHERE句全体が常に真となり、パスワードを入力せずにユーザID「admin」としてログインすることが可能となる。

    h3 セミコロンで分割
    p
      | 先ほどと同じ入力フォームがあるとして、今度は全てのユーザーを削除する構文を記述してみましょう
      | id: admin
      | password: '; DELETE FROM users WHERE 'A' = 'A'
      | この場合、以下のSQLが発行されます。
      code: pre
        | SELECT * FROM users WHERE id = 'admin' AND password = ''; DELETE FROM users WHERE 'A' = 'A'

    p
      | これでテーブルの全ての情報を削除することができました

  section.slide-top
    h1 SQLインジェクション対策
    p
      | ユーザーの入力値によってSQLを組み立てる場合、プレースホルダーを使用することでSQL文が変更されないようにする
    pre: code
      | User.where("user_id = ?", params[:user_id])
    p
      | もし、以下のなコードの場合は全レコードを取得される危険がある
    pre: code
      :escape-html
        User.where("user_id = #{params[:user_id]}")

  section.slide-top
    h1 機密情報の暗号化
    p
      | 前章で個人情報漏えいのリスクを話しましたが、機密情報となるような「パスワード」「住所」「電話番号」などは
      | データベースに保存する際は暗号化しておきましょう

    img.vertxcenter(src="./images/web-security/table.svg" style="width: 1200px")

  section.slide-top
    h1 アプリケーション処理 (Frontend)
    img.vertxcenter(src="./images/web-security/front.svg" style="width: 1200px")

  section.slide-top
    h1 アプリケーション処理 (Frontend)
    ol
      li クロスサイト・スクリプティング
      li 難読化

  section.slide-top
    h1 クロスサイト・スクリプティング
    p
      | ユーザーによって生成されたページ悪意のあるユーザーが任意のコードを埋め込み、サーバーが生成するHTMLの実装に問題があると
      | XSSという脆弱性が生まれます




