extends /layout/_application

prepend Config
  - title = 'バックエンド入門コース Vol.3'


block content
  section.bg-red
    span.background.dark(style="background-image:url('https://source.unsplash.com/R1J6Z1cnJZc/1600x800')")
    // .wrap = container (width: 90%)
    .wrap.aligncenter
      h1
        strong 🐟バックエンドエンジニア入門コース Vol.3
      h5.text-symbols ***
    // .end .wrap
  section.slide-top
    .cta-cover
      h2 本日のスライド
      h1(style="font-size: 100px;") https://bit.ly/2DeXgMa
  section
    // .wrap = container (width: 90%)
    .wrap.size-70
      h2
        strong Agenda
      hr
      ol.text-cols
        li トレーニング概要
        li 前回の振り返り
        li ユーザー認証機能を作ろう
        li ツイート機能を作ろう

    // .end .wrap
    // http://www.dt30.net/gachinko/?p=1008
    // https://chiefmartec.com/post_images/marketing_technology_landscape.jpg
  section.bg-green
    span.background.dark(style="background-image:url('https://images.unsplash.com/photo-1535219241072-7d3c28a49a5c')")
    // .wrap = container (width: 90%)
    .wrap.aligncenter.fadeInUp
      h3
        strong トレーニング概要
    // .end .wrap
  section.slide-top
    // .wrap = container (width: 90%)
    .wrap
      div
        h1 Twitterクローンを作成しよう
      div(style="margin-top: 45px;")
        h3(style="font-weight: bold;") Day1
        p
          | Rails環境の立ち上げから簡単なHTML編集まで行います。
          ol
            li Web概論
            li Ruby/Rails概論 li Git基礎
            li HTML基礎
          img(src="./images/backend-primer/tw-capture.png")
      div(style="margin-top: 45px;")
        h3(style="font-weight: bold;") Day2
        p
          | Userの登録機能を作成します
          ol
            li データベース基礎
            li MVCフレームワーク / ORマッパー解説
            li 組み込み
          img(src="./images/backend-primer/sign-up.png")
      div(style="margin-top: 45px;")
        h3(style="font-weight: bold;") Day3
        p
          | Tweet機能をデータベース設計からModel View Controllerなどを一通り作成します
          ol
            li データーベース設計
            li Rails概論
          img(src="./images/backend-primer/timeline.png")
  section.bg-green
    span.background.dark(style="background-image:url('./images/cover/0.jpg')")
    // .wrap = container (width: 90%)
    .wrap.aligncenter.fadeInUp
      h3
        strong 前回の振り返り
    // .end .wrap
  section.slide-top
    // .wrap = container (width: 90%)
    h2 前回やったこと
    ul
      li Ruby基礎その2
      li データーベース概論 / ORマッパー
      li ユーザー登録機能をつくろう
      li バリデーションを設定しよう

  // section.slide-top
  //   h2 Ruby基礎その3
  //   // TODO
  //   // ここでカレンダー問題をしたほうが良さそう

  section.bg-green
    span.background.dark(style="background-image:url('https://images.unsplash.com/photo-1535219241072-7d3c28a49a5c')")
      // .wrap = container (width: 90%)
    .wrap.aligncenter.fadeInUp
      h3
        strong ユーザー認証機能を作ろう
    // .end .wrap
  section.slide-top
    h2 ログインの仕組み
    p
      | HTTP/HTTPSは基本的にステートレスなプロトコルで前後の通信の状態を持っていない
    img(src="./images/backend-primer3/ステートレス.svg")

  section.slide-top
    h2 ログインの仕組み
    p
      | クッキーに認証情報を保存しておくことで、サーバー側でログイン許可などを実現
    img(src="./images/backend-primer3/クッキー.svg")

  //- https://www.network-security.tokyo/entry/2017/10/24/001444
  section.slide-top
    h2 クッキーについて
    table
      thead
        tr
          th カラム名
          th 値 (例)
          th 説明
      tbody
        tr
          td Name
          td _twitter
          td クッキー名
        tr
          td Value
          td BAh7CSIKZmxhc2hJ...
          td
            | クッキー値 (暗号化したデータをセット)
            br
            | セキュリティ上、以下のようなことを気をつける必要があります
            br
            | ・暗号化したデータをセットする
            br
            | ・パスワードなどの機密情報をクッキーにセットしない
        tr
          td domain
          td .twitter.com
          td
            | クッキーが届くドメインを指定
            br
            | .twitter.comと指定することによりサブドメイン間との共有もできる
        tr
          td path
          td /
          td
            | クッキーを読み込めるパスを指定する
            br
            | 「/」 と指定することで全ページから読み込める
        tr
          td Expires / Max-Age
          td 2028-09-09T01:13:08.543Z
          td
            | クッキーの有効期限
            br
            |  省略するとブラウザを終了させるまでが有効期限となる
        tr
          td HttpOnly
          td true
          td
            | CookieをJavaScriptからアクセスできないように制限
        tr
          td Secure
          td true
          td
            | HTTPSで通信している場合にのみCookieを送信する

  section.slide-top
    h2 Railsでのクッキーの種類
    table
      tbody
        tr
          th 名前
          th 仕組み
          th メリット
          th デメリット
        tr
          td CookieStore
          td Session情報を全てsecret_key_baseで暗号化し、クライアントのCookieに保存する
          td
            | Railsのデフォルトで用意されているセッション管理方式
            br
            | サーバ処理の際にDBにアクセスする必要がないため、処理が高速
          td
            | セッション再生攻撃をされる恐れがある
            br
            | サーバでSession情報を保持していないので、Session情報を変更したいタイミングで変更できない
        tr
          td Redis（インメモリ方式）
          td
            | SessionIdを生成し、クライアントのCookieに保存する
            br
            | クライアントから受け取ったSessionIdをもとにRedisから保存情報を取得
          td
            | インメモリのため、処理が早い
            br
            | クライアントにはIDしか保存しないため、情報漏洩のリスクが低い
          td
            | Redisサーバを立てる必要があるため、コストが掛かる

  section.slide-top
    h2 認証機能の実装ステップ
    p
      | 簡易認証機能ではアカウント名のみでログイン可能なものとする
      br
      | クッキー保存の仕組みはデフォルトのクッキーストアを使用

    h5 ログイン機能
    ol
      li Viewの組み込み作業
      li コントローラーにログインロジックの実装
      li エラー処理

    h5.u-verx9-t タイムライン
    ol
      li セッションからユーザー情報の呼び出し
      li タイムラインへ変数の組み込み

    h5.u-verx9-t ログアウト
    ol
      li delete用のルーティング追加
      li コントローラーへログアウトロジックの実装
      li フォームの組み込み

  section.slide-top
    h2 ログイン機能
    h4.u-verx9-t Viewの組み込み作業
    ol
      li form_forでviewの必要箇所を囲う
      li buttonタグをf.text_fieldやf.submitに置き換えて正しく、フォームが送信されるように調整
    pre: code.hljs.html
      :escape-html
        # app/views/sessions/new.html.erb
        <div class="content">
          <header class="header">
            <div class="content"><img class="logo" src="/assets/images/icons/tw-icon.svg">
              <button class="submit btn primary">ログイン</button>
            </div>
          </header>
          <div class="form">
            <h1 class="title">Twitterにログイン</h1>
            <input type="text" class="input" placeholder="アカウント名">
            <button>アカウント名</button
          </div>
        </div>

  section.slide-top
    h2 ログイン機能
    h4.u-verx9-t Viewの組み込み作業[解説]
    pre: code
      :escape-html
        <div class="content">
          <%= form_for @form, url: session_path do |f|%>
            <header class="header">
              <div class="content"><img class="logo" src="/assets/images/icons/tw-icon.svg">
                <%= f.submit "ログイン", { class: "submit btn primary" }%>
              </div>
            </header>
            <div class="form">
              <h1 class="title">Twitterにログイン</h1>
              <%= f.text_field :account, { class: "input", placeholder: "アカウント名" }%>
            </div>
          <% end %>
        </div>

  section.slide-top
    h2 ログイン機能
    h4.u-verx9-t コントローラーにログインロジックの実装
    ol
      li フォームオブジェクトの生成
      li パラメーターの受け取り
      li ログイン処理
      li ログイン成功時にタイムラインへリダイレクト
    p: a(href="https://github.com/pocke777/twwwitter-clone-rails/blob/0819b34f80953ef2f27ed620fb5ab32deba1a44c/app/forms/session_form.rb" target="_blank") SessionForm
    pre: code.hljs
      | #app/controllers/sessions_controller.rb
      | class SessionsController < ApplicationController
      |   def new
      |     @form = SessionForm.new
      |   end
      |
      |   def create
      |     # ここにログイン処理を実装
      |   end
      | end

  section.slide-top
    h2 ログイン機能
    h4.u-verx9-t コントローラーにログインロジックの実装[解説]
    pre: code.hljs
      | #app/controllers/sessions_controller.rb
      | class SessionsController < ApplicationController
      |   def new
      |     @form = SessionForm.new
      |   end
      |
      |   def create
      |     # パラメータの受け取り
      |     @form = SessionForm.new(session_params)
      |
      |     if @form.valid?
      |       # ログイン処理 (セッション情報の追加)
      |       session[:user_id] = @form.user.id
      |       # タイムラインへリダイレクト
      |       redirect_to timeline_index_path
      |     end
      |   end
      |
      |   private
      |   def session_params
      |     params.require(:session_form).permit(:account)
      |   end
      | end


  section.slide-top
    h2 ログイン機能
    h4.u-verx9-t エラー処理
    ol
      li バリデーション失敗時にフォームをレンダリング
      li エラーメッセージを出力するようviewに組み込み

  section.slide-top
    h2 ログイン機能
    h4.u-verx9-t エラー処理[解説]
    pre: code
      | # app/controllers/sessions_controller.rb
      | class SessionsController < ApplicationController
      |   def new
      |     @form = SessionForm.new
      |   end
      |
      |   def create
      |     # パラメータの受け取り
      |     @form = SessionForm.new(session_params)
      |
      |     if @form.valid?
      |       # ログイン処理 (セッション情報の追加)
      |       session[:user_id] = @form.user.id
      |       # タイムラインへリダイレクト
      |       redirect_to timeline_index_path
      |     else
      |       # バリデーション失敗時にフォームをレンダリング
      |       render :new
      |     end
      |   end
      |
      |   private
      |   def session_params
      |     params.require(:session_form).permit(:account)
      |   end
      | end

    pre.u-verx9-t
      | app/views/sessions/new.html.erb

      code
        :escape-html

          <div class="content">
            <%= form_for @form, url: session_path do |f|%>
              <header class="header">
                <div class="content"><img class="logo" src="/assets/images/icons/tw-icon.svg">
                  <%= f.submit "ログイン", { class: "submit btn primary" }%>
                </div>
              </header>
              <div class="form">
                <h1 class="title">Twitterにログイン</h1>
                <ul class="errors"><% @form.errors.full_messages.each do |msg| %><li class="errors-item"> <%= msg %> </li><% end %></ul>
                <%= f.text_field :account, { class: "input", placeholder: "アカウント名" }%>
              </div>
            <% end %>
          </div>

  section.slide-top
    h2 タイムライン
    h4.u-verx9-t セッションからユーザー情報の呼び出し
    ol
      li 保存されたセッションからユーザーの呼び出し
      li 変数へ代入
      li 保存されたセッションがなければトップへリダイレクト
    pre: code
      | # app/controllers/timeline_controller.rb
      | class TimelineController < ApplicationController
      |   def index
      |     # ここで呼び出し処理
      |   end
      | end

  section.slide-top
    h2 タイムライン
    h4.u-verx9-t セッションからユーザー情報の呼び出し[解説]

    pre: code
      | # app/controllers/timeline_controller.rb
      | class TimelineController < ApplicationController
      |   def index
      |     @user = User.find_by(id: session[:user_id])
      |     redirect_to new_session_path if @user.blank?
      |   end
      | end

  section.slide-top
    h2 タイムライン
    h4.u-verx9-t タイムラインへ変数の組み込み
    ol
      li 「ユーザー名」 「@account」 「自己紹介」の部分を変数化していく
    pre: code
      :escape-html
        <div class="content">
          # ...省略
          <div class="timeline">
            <div class="main">
              <div class="sidebar">
                <div class="profile">
                  <h1 class="name">ユーザー名</h1>
                  <h2 class="account">@account</h2>
                  <div class="description">これは紹介文テキストこれは紹介文テキストこれは紹介文テキストこれは紹介文テキストこれは紹介文テキストこれは紹介文テキスト</div>
                </div>
              </div>
              <div class="content">
                <% (1..10).each do |i| %>
                  <div class="tweet">
                    <div class="content">
                      <div class="avatar"><img class="img" src="https://pbs.twimg.com/profile_images/992619235850444800/NRV9dtxv_400x400.jpg" /></div>
                      <div class="main">
                        <div class="header">
                          <div class="item name">ユーザー名</div>
                          <div class="item account">@account</div>
                        <div class="item date">2017年10月9日</div>
                        </div>
                        <div class="text">本日全ての開発者の皆さんにAccount Activity APIを公開しました。なお、User StreamsとSite Streamsとともに、ダイレクトメッセージの使われていないエンドポイントは本日から3ヶ月後の2018年8月16日（米国時間）に廃止されるよう変更になります。詳細は以下ブログをご覧ください。</div>
                      </div>
                    </div>
                  </div>
                <% end %>
              </div>
            </div>
          </div>
        </div>

  section.slide-top
    h2 ログアウト
    pre: code.hljs
      | # config/routes.rb
      | resource :session, only: [:new, :create, :destroy]

    pre: code.hljs
      | # app/controllers/sessions_controller.rb
      | def destroy
      |   session.delete(:user_id)
      |   redirect_to root_path
      | end
    pre: code.hljs
      | # app/views/timeline/index.html.erb
      | <%= link_to "ログアウト", session_path, method: :delete, class: "submit btn default logout" %>

  section.bg-green
    span.background.dark(style="background-image:url('./images/cover/0.jpg')")
    // .wrap = container (width: 90%)
    .wrap.aligncenter.fadeInUp
      h3
        strong ツイート機能を作ろう
    // .end .wrap

  section.slide-top
    h2 ツイート機能の実装ステップ
    ol
      li DB設計
      li テーブル作成
      li スケルトン作成
      li ツイート機能実装
      li タイムラインへ組み込み

  section.slide-top
    h5 ツイート機能の実装ステップ
    h2 DB設計
    ul
      li ツイートの必要情報
      li ツイートとユーザーの関連情報

  section.slide-top
    h5 ツイート機能の実装ステップ
    h2 DB設計
    img(src="./images/backend-primer3/tweet-table.svg")

  section.slide-top
    h5 ツイート機能の実装ステップ
    h2 テーブル作成
    ul
      li.u-verx3 マイグレーションコマンドでファイルの作成
        pre: code
          | # マイグレーションの作成
          | bin/rails g migration Tweet
          |
          | # db/migrate/20180926023850_tweet.rb
          | class Tweet < ActiveRecord::Migration[5.1]
          |   def change
          |     create_table :tweets do |t|
          |       # ...こちらにスキーマ定義
          |
          |       t.timestamps null: false
          |     end
          |   end
          | end
        small: a(href="https://railsguides.jp/active_record_migrations.html#マイグレーションを作成する" target="_blank") https://railsguides.jp/active_record_migrations.html#マイグレーションを作成する

  section.slide-top
    h5 ツイート機能の実装ステップ
    h2 テーブル作成
    pre: code
      | # マイグレーションの作成
      | bin/rails g migration Tweet
      |
      | # db/migrate/20180926023850_tweet.rb
      | class Tweet < ActiveRecord::Migration[5.1]
      |   def change
      |     create_table :tweets do |t|
      |       t.references :user
      |       t.text :tweet
      |       t.timestamps null: false
      |     end
      |   end
      | end

  section.slide-top
    h5 ツイート機能の実装ステップ
    h2 スケルトン作成
    ol
      li モデルの作成
        p
          | クラスの作成
          br
          | リレーションの定義
      li Controllerの作成
        p
          | クラスの作成
          br
          | アクションの作成
      li ルーティングの設定
        p
          | ルーティングの設定 (編集/削除はなし)

  section.slide-top
    h5 ツイート機能の実装ステップ
    h2 スケルトン作成
    h5.u-verx9-t モデルの作成
    pre: code
      | # app/models/tweet.rb
      | class Tweet < ApplicationRecord
      |   belongs_to :user
      | end
      |
      | # app/models/user.rb
      | class User < ApplicationRecord
      |   has_many :tweets
      | end

    h5.u-verx9-t Controllerの作成
    pre: code
      | # app/controllers/tweets_controller.rb
      | class TweetsController < ApplicationController
      |   def new
      |   end
      |
      |   def create
      |   end
      | end

    h5.u-verx9-t ルーティングの設定 (編集/削除はなし)
    pre: code
      | # config/routes.rb
      | Rails.application.routes.draw do
      |   # ...省略
      |   resources :tweets, only: [:new, :create]
      | end

  section.slide-top
    h5 ツイート機能の実装ステップ
    h2 ツイート機能の実装
    ol
      li newアクションの定義
        p
          | Tweetモデルのインスタンス生成
      li viewの組み込み
        p
          | form_forによるフォームの生成
      li createアクションの定義
        p
          | パラメーターの受け取り
          br
          | ツイート保存処理
          br
          | 成功時はタイムラインへリダイレクト
          br
          | ※ ツイートに紐づくユーザーは仮で設定する (最初のユーザー)

  section.slide-top
    h5 ツイート機能の実装ステップ
    h2 ツイート機能の実装
    h5.u-verx9-t newアクションの定義
    pre: code
      | # app/controllers/tweets_controller.rb
      | class TweetsController < ApplicationController
      |   def new
      |     @tweet = Tweet.new
      |   end
      | end

    h5.u-verx9-t viewの組み込み
    pre: code
      :escape-html
        # app/views/tweets/new.html.erb
        <div class="content">
          <header class="header">
            <div class="content wide">
              <img class="logo" src="/assets/images/icons/tw-icon.svg" />
            </div>
            <%= form_for @tweet do |f|%>
              <div class="share">
                <div class="title">リンクをあなたのフォロワーに共有する</div>
                  <%= f.text_area :tweet, { class: "input" }%>
                  <%= f.submit "ツイート", { class: "submit btn primary" }%>
              </div>
            <% end %>
          </header>
        </div>

    h5.u-verx9-t createアクションの定義
    pre: code
      | # app/controllers/tweets_controller.rb
      | class TweetsController < ApplicationController
      |   def create
      |     ## TODO: 仮ユーザー
      |     user = User.first
      |     @tweet = user.tweets.build(tweet_params)
      |     if @tweet.save
      |       redirect_to timeline_index_path
      |     end
      |   end
      |
      |   private
      |   def tweet_params
      |     params.require(:tweet).permit(
      |       :tweet
      |     )
      |   end
      | end

  section.slide-top
    h5 ツイート機能の実装ステップ
    h2 タイムラインへ組み込み
    pre: code
      | # app/controllers/timeline_controller.rb
      | class TimelineController < ApplicationController
      |   def index
      |     # TODO: ユーザー仮
      |     @user = User.first
      |     @tweets = @user.tweets.order(created_at: :desc)
      |   end
      | end
    pre: code
      :escape-html
        # app/views/timeline/index.html.erb
        <div class="timeline">
          <div class="main">
            <div class="sidebar">
              <div class="profile">
                <h1 class="name"><%= @user.username %></h1>
                <h2 class="account"><%= "@#{@user.account }" %></h2>
                <div class="description"><%= @user.introduction %></div>
              </div>
            </div>
            <div class="content">
            <% @tweets.each do |val| %>
                <div class="tweet">
                  <div class="content">
                    <div class="avatar"><img class="img" src="https://pbs.twimg.com/profile_images/992619235850444800/NRV9dtxv_400x400.jpg" /></div>
                    <div class="main">
                      <div class="header">
                        <div class="item name"><%= @user.username %></div>
                        <div class="item account"><%= @user.account %></div>
                        <div class="item date">2017年10月9日</div>
                      </div>
                      <div class="text"> <%= val.tweet %></div>
                    </div>
                  </div>
                </div>
              <% end %>
            </div>
          </div>
        </div>
  section.bg-green
    span.background.dark(style="background-image:url('./images/cover/0.jpg')")
    // .wrap = container (width: 90%)
    .wrap.aligncenter.fadeInUp
      h3
        strong End
