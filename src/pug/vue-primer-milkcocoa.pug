extends /layout/_application

prepend Config
  - title = 'リアルタイムWebアプリハンズオン'

block head
  script(async src="https://static.codepen.io/assets/embed/ei.js")


block content
  section.bg-red
    span.background.dark(style="background-image:url('https://source.unsplash.com/R1J6Z1cnJZc/1600x800')")
    // .wrap = container (width: 90%)
    .wrap.aligncenter
      h1
        strong リアルタイムWebアプリハンズオン
      h5.text-symbols Vue.js & Milkcocoa
    // .end .wrap
  section
    // .wrap = container (width: 90%)
    .wrap.size-70
      h2
        strong Agenda
      hr
      ol.text-cols
        li トレーニング概要
        li 自己紹介
        li クラウドコンピューティング
        li Milkcocoa紹介
        li Javascript基礎
        li Vue.js解説
        li 実践Vue.jsアプリケーション
  section.bg-green
    span.background.dark(style="background-image:url('https://images.unsplash.com/photo-1535219241072-7d3c28a49a5c')")
    // .wrap = container (width: 90%)
    .wrap.aligncenter.fadeInUp
      h3
        strong トレーニング概要
    // .end .wrap
  section.slide-top
    // .wrap = container (width: 90%)
    h1 Vue.jsとMilkcocoaを使ってSlackを作ってみよう
    img.vertxcenter(src="images/vue-primer-milkcocoa/sample.gif" width="1200")

  section.fullscreen
    span.background.dark(style="background-image:url('./images/cover/profile.png'); width: 60%; height: 120%; top: 50%; left: 50%; transform: translate(-50%, -50%); opacity: .4;")
    h2(style="position: relative; font-weight: bold;") WHAT I'M ABOUT
    p(style="position: relative; font-weight: bold;")
      | 株式会社TRUNK TL Kawasaki Atsushi<br>
      | 2013年じげんグループHRメディア事業のPMやバックエンドを担当。<br>
      | 新規事業立ち上げの経験を経てエンジニアリングユニットのマネージャーに従事。<br>
      |
      | 2015年に株式会社カヤックへ入社。<br>
      | クライアントワークや自社サービス(Lobi)のフロントエンド、バックエンドおよびインフラ設計、構築、運用を担当。<br>


  section.bg-green
    span.background.dark(style="background-image:url('https://images.unsplash.com/photo-1535219241072-7d3c28a49a5c')")
    // .wrap = container (width: 90%)
    .wrap.aligncenter.fadeInUp
      h3
        strong クラウドコンピューティング概論
    // .end .wrap

  section.slide-top
    h3 クラウドコンピューティング概論
    p
      | クラウドとはオンプレミスとよばれる、自社で運用されたサーバーで提供されたサービスを利用するのに対して
      | ユーザーがネットワークを介して各種コンピューティングサービスを受ける形態
    img.vertxcenter(src="images/vue-primer-milkcocoa/cloud_computing.svg" width="800")

  section.slide-top
    h1 クラウドコンピューティングの分類
    h3.u-verx9-t SaaS（Software as a Service)
    p
      | バズワードとしてよく取り上げられるSaasですが、ソフトウェアをネットワーク経由でサービスとして提供する形態はASP(Application Service Provider)として
      | 従来より行われている。ASPとSaaSを区別することなく使われていることが多いがなぜ今ここまでバズワードになったのか?
      |
      | ひとつはマルチテナント方式の普及により再び注目を浴びていることが考えらる。
      | このマルチテナント方式によりデータの分離、セキュリティの配慮をしつつメンテナンスコストが低くリソースの利用効率が高い
      | 構成の実現が可能になった
    img.vertxcenter(src="images/vue-primer-milkcocoa/tenant.svg" width="800")

    h3.u-verx9-t PaaS(Platform as a Service)
    p
      | PaaSでは、ソフトウェアを構築および稼動させるための土台となるプラットフォームを、インターネット経由のサービスとして提供する
      | Azure、AWS、Google App Engineなどがこの分類にあたる。

    h3.u-verx9-t IaaS(Infrastructure as a Service)
    p
      | 仮想サーバをはじめとした機材やネットワークなどのインフラを、インターネット上のサービスとして提供する形態
      | Google Compute Engine,EC2などがこの分類にあたる。

  section.slide-top
    h1 マイクロサービス
    p
      | マイクロサービスとは、ソフトウェア作成手法の1つです。このアーキテクチャはモノリシックなアプリケーションと対比するもので
      | モノリシックなアーキテクチャが一つのアプリケーションにユーザーへの提供機能を全て含めることで、マイクロサービスとは
      | 必要な機能単位にアプリケーションを分割し、統合することでサービスを提供する形態のことである。

    img.vertxcenter(src="images/vue-primer-milkcocoa/monolithic.svg" width="800")

  section.slide-top
    h1 マイクロサービスアーキテクチャ例 (AWS)
    img.vertxcenter(src="images/vue-primer-milkcocoa/infra.svg" width="1200")

  section.bg-green
    span.background.dark(style="background-image:url('./images/cover/0.jpg')")
    // .wrap = container (width: 90%)
    .wrap.aligncenter.fadeInUp
      h3
        strong Milkcocoa紹介

  section.slide-top
    h1 Milkcocoa紹介
    p
      | Milkcocoaは、IoTデバイス・スマートフォン・PC間で簡単にリアルタイムなデータのやり取りが出来るようになるクラウドプラットフォーム
    a(href="https://mlkcca.com/") https://mlkcca.com/
    img.vertxcenter.u-verx9-t(src="images/vue-primer-milkcocoa/milk_desctop.png" width="1200")

  section.slide-top
    h1 リアルタイム通信
    p
      | 従来のWebアプリケーションでは単方向通信と呼ばれ、リクエストはクライアントからのみ送られサーバーから通信を開始することができませんでした。(それでも、擬似的な双方向通信を実現するポーリングなどの手法がありましたが
      |
      | WebSocketという新しいプロトコルが生まれたことにより双方向通信の実現ハードルが下がりリアルタイム通信アプリケーションが
      | 広く普及しました。
    img.vertxcenter.u-verx9-t(src="images/vue-primer-milkcocoa/websocket.svg" width="1200")


  section.slide-top
    h1 リアルタイム通信手法
    table
      thead
        tr
          th 呼称
          th プロトコル
          th サーバーPush
          th メモリ消費
          th 遅延
          th 導入ハードル
      tbody
        tr
          td Polling
          td HTTP
          td ☓
          td ☓
          td ☓
          td 容易
        tr
          td LongPolling(Comet)
          td HTTP
          td ○
          td △
          td △
          td 容易
        tr
          td ServerSentEvents
          td HTTP
          td ○
          td ○
          td ○
          td ブラウザ互換依存あり
        tr
          td WebSocket
          td WebSocket
          td ○
          td ○
          td ◎
          td 面倒

  section.slide-top
    h1 Milkcocoaの使い方
    ol
      li アカウントの作成(無料)
      li アプリの作成
      li 組み込み

  section.slide-top
    h1 アカウントの作成(無料)
    img.vertxcenter(src="images/vue-primer-milkcocoa/milk_account.png")
    a(href="https://mlkcca.com" target="_blank") https://mlkcca.com

  section.slide-top
    h1 アプリの作成
    img.vertxcenter(src="images/vue-primer-milkcocoa/milk_app.png")

  section.bg-green
    span.background.dark(style="background-image:url('https://images.unsplash.com/photo-1535219241072-7d3c28a49a5c')")
    // .wrap = container (width: 90%)
    .wrap.aligncenter.fadeInUp
      h3
        strong Javascript基礎
    // .end .wrap

  section.slide-top
    h1 Javascript基礎
    p
      | ブラウザ上で実行可能なプログラミング言語の一種。しかし、Node.jsなど非ブラウザ環境においても使用されている

    h3.u-verx3 HTML
    p
      | マークアップ言語で、これを使ってウェブコンテンツに構造と意味を与えます。 例えば段落や見出しや表を定義したり、ページに画像や動画を入れたりします。

    h3.u-verx3 CSS
    p
      | HTML コンテンツに適用するスタイリング規則の言語です。 例えば背景とフォントの色を設定したり、複数カラムにコンテンツをレイアウトしたりします。

    h3.u-verx3 Javascript
    p
      | 動的にコンテンツを更新したり、マルチメディアを管理したり、その他多くのことができるスクリプト言語です。

  section.slide-top
    h1 Javascriptデータ型

    h3.u-verx3 プリミティブ型
    pre: code
      | true // Boolean
      | null // Null
      | undefined // 未定義
      | 2018 // Number
      | "こんにちは" // String
      | Symbol("hello") // Symbol (ES2015)

    h3.u-verx3 オブジェクト型
    pre: code
      | ['hello1', 'hello1', 'hello1'] // 配列
      | { hello1: "world1", hello2: "world2" } // Object
      | [{ hello: "world1" }, { hello: "world2" }] // Collection
      | function () {} // 関数

  section.slide-top
    h1 Javascript文法
    h3 (繰り返し処理 / 条件分岐 / 関数 / イベント)

    strong.u-verx9-t 繰り返し処理
    <iframe height='265' scrolling='no' title='for' src='//codepen.io/pickrusu/embed/QZYjeg/?height=265&theme-id=0&default-tab=js,result' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/pickrusu/pen/QZYjeg/'>for</a> by pickrusu (<a href='https://codepen.io/pickrusu'>@pickrusu</a>) on <a href='https://codepen.io'>CodePen</a>.
    </iframe>

    strong.u-verx9-t 条件分岐
    <iframe height='265' scrolling='no' title='for' src='//codepen.io/pickrusu/embed/WaPrZd/?height=265&theme-id=0&default-tab=js,result' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/pickrusu/pen/WaPrZd/'>for</a> by pickrusu (<a href='https://codepen.io/pickrusu'>@pickrusu</a>) on <a href='https://codepen.io'>CodePen</a>.
    </iframe>

    strong.u-verx9-t 関数
    <iframe height='265' scrolling='no' title='function' src='//codepen.io/pickrusu/embed/pxGgaZ/?height=265&theme-id=0&default-tab=js,result' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/pickrusu/pen/pxGgaZ/'>function</a> by pickrusu (<a href='https://codepen.io/pickrusu'>@pickrusu</a>) on <a href='https://codepen.io'>CodePen</a>.
    </iframe>

    strong.u-verx9-t イベント
    <iframe height='265' scrolling='no' title='event' src='//codepen.io/pickrusu/embed/bmzEmL/?height=265&theme-id=0&default-tab=js,result' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/pickrusu/pen/bmzEmL/'>event</a> by pickrusu (<a href='https://codepen.io/pickrusu'>@pickrusu</a>) on <a href='https://codepen.io'>CodePen</a>.
    </iframe>


  section.slide-top
    // https://codepen.io/pickrusu/pen/NOojpE?editors=0011
    h1 FizzBuzz問題をやってみよう
    p
      | 1 ~ 100までの数字を出力する
      | 3で割り切れる場合はFizz
      | 5で割り切れる場合はBuzz
      | 3と5の両方で割り切れる場合はFizzBuzzを出力しよう

  section.bg-green
    span.background.dark(style="background-image:url('https://images.unsplash.com/photo-1535219241072-7d3c28a49a5c')")
    // .wrap = container (width: 90%)
    .wrap.aligncenter.fadeInUp
      h3
        strong Vue.js解説
    // .end .wrap

  section.slide-top
    h3 Vue.jsとは?
    p
      | Vue.jsはインタラクティブなUIを構築するためのJavaScriptフレームワーク
      | 2013年にEvan You氏の個人プロジェクトとして開始，2014年2月にバージョン0.8が正式に公開
      | JavaScript ベスト・オブ・ザ・イヤーでは2年連続でVue.jsがベストプロジェクトに選ばれている <br>
      a(href="https://risingstars.js.org/2017/ja/#section-all") https://risingstars.js.org/2017/ja/#section-all
  section.slide-top
    h4 Vue.jsの特徴
    ul
      li 学習コストが低い(API/テンプレート)
      li リアクティブなデータバインディング
      li コンポーネント指向UI
      li ファイルサイズが軽量

    h4.u-verx9-t React vs Vue.js
    p
      | React では、すべてのコンポーネントは JSX を用いた 描画関数 (render) の中でそれらの UI を表現を行う。
      | これにより、完全なプログラミング言語 (JavaScript) の力を活用してビューを構築することができる。
      | 一方Vue.jsではJSXサポートがありながら、HTML/Pugのようなテンプレートでビューを構築していくことが可能

    h4.u-verx9-t AngularJS vs Vue.js
    p
      | AngularJSはフルスタックフレームワークであり、開発に必要なものはすべて含まれている。
      | 標準でルーティング機能が備わっていたり、ユニットテストやE2Eテストも組み込みやすくなっている。
      | 一方、Vue.jsはビューに焦点を絞ったフレームワークで学習コストが低いことが特徴


  section.slide-top
    h4 Example(Pure Javascript)
    <p data-height="465" data-theme-id="0" data-slug-hash="aRmRXw" data-default-tab="js,result" data-user="pickrusu" data-pen-title="JS Sample Form" class="codepen">See the Pen <a href="https://codepen.io/pickrusu/pen/aRmRXw/">JS Sample Form</a> by pickrusu (<a href="https://codepen.io/pickrusu">@pickrusu</a>) on <a href="https://codepen.io">CodePen</a>.</p>

  section.slide-top
    h4 Example(Vue.js)
    <p data-height="465" data-theme-id="0" data-slug-hash="oazaQp" data-default-tab="html,result" data-user="pickrusu" data-pen-title="Vue.js Sample Form" class="codepen">See the Pen <a href="https://codepen.io/pickrusu/pen/oazaQp/">Vue.js Sample Form</a> by pickrusu (<a href="https://codepen.io/pickrusu">@pickrusu</a>) on <a href="https://codepen.io">CodePen</a>.</p>

  section.slide-top
    h4 Vue.jsインスタンスの生成
    pre: code
      | new Vue({
      |   // Vue.jsとDOMの関連付け
      |   el: "#app",
      |   // データ
      |   data: {
      |     message: "Hello"
      |     }
      |   },
      |   // ライフサイクルフック
      |   created: function() {
      |     console.log("created!!")
      |     }
      |   },
      |   // メソッドの定義
      |   methods: {
      |     say: function(msg) {
      |       alert("Hello" + msg)
      |       }
      |     }
      |   },
      | })


  section.slide-top
    h4 基本操作 (Loop / if / method / onclick)
    h3 Loop
    <p data-height="265" data-theme-id="0" data-slug-hash="NOdPNb" data-default-tab="js,result" data-user="pickrusu" data-pen-title="NOdPNb" class="codepen">See the Pen <a href="https://codepen.io/pickrusu/pen/NOdPNb/">NOdPNb</a> by pickrusu (<a href="https://codepen.io/pickrusu">@pickrusu</a>) on <a href="https://codepen.io">CodePen</a>.</p>

    h3 if
    <p data-height="265" data-theme-id="0" data-slug-hash="aRpzNa" data-default-tab="html,result" data-user="pickrusu" data-pen-title="Vue.js if" class="codepen">See the Pen <a href="https://codepen.io/pickrusu/pen/aRpzNa/">Vue.js if</a> by pickrusu (<a href="https://codepen.io/pickrusu">@pickrusu</a>) on <a href="https://codepen.io">CodePen</a>.</p>

    h3 method / onclick
    <p data-height="265" data-theme-id="0" data-slug-hash="NOdPdd" data-default-tab="html,result" data-user="pickrusu" data-pen-title="Vue.js method" class="codepen">See the Pen <a href="https://codepen.io/pickrusu/pen/NOdPdd/">Vue.js method</a> by pickrusu (<a href="https://codepen.io/pickrusu">@pickrusu</a>) on <a href="https://codepen.io">CodePen</a>.</p>

  section.slide-top
    h4 Vue.jsを触ってみよう
    ul
      li Hello World! となっている部分を Hello Vue!に変更してみよう
      li 入力されている文字数が20文字以上になったら `alert('not more than 20')` とアラートを表示しよう

    <p data-height="465" data-theme-id="0" data-slug-hash="oazaQp" data-default-tab="html,result" data-user="pickrusu" data-pen-title="Vue.js Sample Form" class="codepen">See the Pen <a href="https://codepen.io/pickrusu/pen/oazaQp/">Vue.js Sample Form</a> by pickrusu (<a href="https://codepen.io/pickrusu">@pickrusu</a>) on <a href="https://codepen.io">CodePen</a>.</p>

  section.slide-top
    h4 Vue.jsの裏側
    h5 ライフサイクル
    img.vertxcenter(src="images/vue-primer/lifecycle.png" width="800")

  section.slide-top
    h5 仮想DOM
    p
      | Vue.jsはDOMとJavaScriptのデータを同期するためにリアクティブなデータバインディングを持っている
      | データの変更後に仮想DOMに反映され、仮想DOMと実際のDOMの差分を計算して変更部分を実際のDOMに反映し、Viewが変更される
    img.vertxcenter(src="images/vue-primer/1_hwlyMTnboUp9Mk0mUYhpdQ.png" width="800")

  section.bg-green
    span.background.dark(style="background-image:url('https://images.unsplash.com/photo-1535219241072-7d3c28a49a5c')")
    // .wrap = container (width: 90%)
    .wrap.aligncenter.fadeInUp
      h3
        strong 実践Vue.jsアプリケーション
    // .end .wrap

  section.slide-top
    h1 今回作成するアプリケーションはこちら
    img.vertxcenter(src="images/vue-primer-milkcocoa/sample.gif" width="1200")

  section.slide-top
    h1.u-verx3 ソースコードはこちらを利用
    <iframe src="https://codesandbox.io/embed/vvov1nvx67" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe>

  section.slide-top
    h1.u-verx3 ツールの説明
    img.vertxcenter(src="images/vue-primer/sandbox.png" width="1200")

  section.slide-top
    h1.u-verx3 実装ステップ
    ol
      li Vueインスタンスの生成
      li モーダルの実装
      li 入力データの反映
      li
        strong Milkcocoaとつなぎ込み
      li コンポーネント化

  section.slide-top
    h1 Vueのインスタンスの生成
    p
      | 全ての Vue アプリケーション は、Vue 関数で新しい Vue インスタンスを作成することによって始まる

    pre: code
      | var vm = new Vue({
      |   // オプション
      | })

  section.slide-top
    h1 モーダルの実装
    ol
      li modalVisibledをVueアプリのデータ追加
      li v-ifディレクティブによるDOMの出し分け
      li クリックイベントのListen
      li モーダル内のフォームとVueアプリのデータを同期
    img.vertxcenter(src="images/vue-primer-milkcocoa/modal.gif" width="1200")

  section.slide-top
    h1 入力データの反映
    ol.u-verx9-t
      li messagesのデータをVueアプリに追加。 メッセージ部分をモックデータに置き換え
      li currentInputのデータをVueアプリに追加。 <br> 入力フォームのデータをv-modelディレクティブによりVueアプリデータと同期
      li 送信ボタンにクリックイベントをリッスン。関数内でmessagesの変数に対して追加
    img.vertxcenter.u-verx9-t(src="images/vue-primer-milkcocoa/input.gif" width="1200")

    h4.u-verx3 サンプルデータ
    pre: code
      | const messages = [
      |   {
      |     name: 'scottish-fold',
      |     time: '2018/01/01 11:00 ',
      |     icon: 'https://pocke777.github.io/slides/assets/icon.png',
      |     text: 'これはサンプルテキストですこれはサンプルテキストです\nこれはサンプルテキストです\nこれはサンプルテキストですこれはサンプルテキストですこれはサンプルテキストです',
      |   },
      |   {
      |     name: 'scottish-fold',
      |     time: '2018/01/01 11:00 ',
      |     icon: 'https://pocke777.github.io/slides/assets/icon.png',
      |     text: 'これはサンプルテキストですこれはサンプルテキストです\nこれはサンプルテキストです\nこれはサンプルテキストですこれはサンプルテキストですこれはサンプルテキストです',
      |   },
      |   {
      |     name: 'scottish-fold',
      |     time: '11:10 AM',
      |     icon: 'https://pocke777.github.io/slides/assets/icon.png',
      |     text: 'これはサンプルテキストですこれはサンプルテキストです\nこれはサンプルテキストです\nこれはサンプルテキストですこれはサンプルテキストですこれはサンプルテキストです',
      |   }
      | ]

  section.slide-top
    h1 Milkcocoaとつなぎ込み
    p
      | 詳細は
      a(href="https://mlkcca.com/document/start-js.html") こちら
      | のドキュメントを参照
    ol
      li scriptタグを読み込む
      li AppIdからオブジェクトの生成
        small: pre: code const milkcocoa = new MilkCocoa('<your app code>.mlkcca.com')
      li データストアの取得
        small: pre: code const ds = milkcocoa.dataStore('sample');
      li 送信ボタンを押したときのコールバックでデータの保存
        small: pre: code
          | ds.push({name : this.name, send_at: new Date(), content : this.currentInput, icon: this.icon});
      li データ保存時のイベントにリッスン
        small: pre: code
          | ds.on('push', (value) => {
          |   this.messages.push(value);
          | });
      li ロード時に初期データの取得
        small: pre: code
          | ds.stream()
          |   .next((err, messages) => {
          |     this.messages = messages;
          |   });
      li データ構造に合わせてHTMLの調整

  section.slide-top
    h1.u-verx3 コンポーネント化
    h3.u-verx9-t 単一ファイルコンポーネント
    p
      | コンポーネントとは部品という意味
      | ページを構成している要素を部品化し、構造・見た目・振る舞いをセットにして1ファイルにまとめて記述する

  section.slide-top
    h1.u-verx3 Vue.jsの単一ファイルコンポーネントシンタックス
    iframe(src="https://codesandbox.io/embed/m5x9x7242p" style="width:100%; height:800px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin")

  section.slide-top
    h1.u-verx3 Props
    p
      | 親コンポーネントから子コンポーネントへとデータ(関数)の受け渡しを行う
    iframe(src="https://codesandbox.io/embed/0pvqq7wn7n" style="width:100%; height:800px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin")

  section.slide-top
    h1.u-verx3 メッセ部分をコンポーネント化
    img.vertxcenter(src="images/vue-primer/component.png" width="1000")

  section.slide-top
    h1.u-verx3 コンポーネント化を行うための実装ステップ
    ol
      li Vueコンポーネントファイルの作成
      li コンポーネントの登録
      li Viewの書き換え / propsの受け渡し

  section.slide-top
    h1.u-verx3 And more...
    li Vue Router
    li Vuex

  section.bg-green
    span.background.dark(style="background-image:url('./images/cover/0.jpg')")
    // .wrap = container (width: 90%)
    .wrap.aligncenter.fadeInUp
      h3
        strong Thanks
